abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.23
n <- 1000    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,8,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.23
n <- 1000    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,8,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
mean.sum
median.sum
sum.mean
candy_color<-c("brown","yellow","green","red","orange","blue")
company<-c(0.14,0.14,0.16,0.13,0.19,0.24)
my_bag<-c(1,1,2,2,10,7)
color_prob<-data.frame(candy_color,company,my_bag,stringsAsFactors = FALSE)
head(color_prob)
sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE))
sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)
color_prob$candy_color
for (i in 1:100){
if((table(sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)))==color_prob$my_bag){
print(1)
} else print(0)
}
sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)
color_prob$my_bag
table(sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE))
my_bag<-sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)
my_bag
may_bag=="red"
my_bag=="red"
as.numeric(my_bag=="red")
sum(as.numeric(my_bag=="red"))
number.red<-sum(as.numeric(my_bag=="red"))
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
library(readr)
BISC <- read_csv("~/Desktop/BISC.csv")
View(BISC)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(gmodels)
library(ggpubr)
library(MLmetrics)
site_details<-data.frame(c("ORNE","BISC","MOOT","VERN"),c(3,14,74,14),c(19,18,12,11),c(100,250,100,40))
colnames(site_details)<-c("Site","Count","TimeSpan","epsilon")
selection<-site_details$Site=="BISC"
G_2chicks <- matrix(c(0.00,0.59,0.75,0.80,0.89,0.89,0.89,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.75,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.80,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.89,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.89,0.89), nrow = 7, byrow=TRUE)
# Matrix with max productivity and max survival
G_Max <- matrix(c(0.00,1,1,1,1,1,1,
1,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,1,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,1,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,1,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,1,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,1,1), nrow = 7, byrow=TRUE)
# Matrix with max productivity and high survival to test on Biscoe Point
G_Bisc <- matrix(c(0.00,0.80,0.80,0.80,0.89,0.89,0.89,
0.80,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.80,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.80,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.89,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.89,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.89,0.89), nrow = 7, byrow=TRUE)
growth_alone_simple <- function(Lmatrix, year, starters){
G.projected <- matrix(0, nrow = nrow(Lmatrix), ncol = year+1)
G0 <-matrix(c(0,0,starters,0,0,0,0), ncol = 1)
G.projected[, 1] <- G0
for (j in 1:year)
{
G.projected[, j + 1] <- round((Lmatrix %*% (G.projected[,j])), digits = 0)
}
output <- colSums(G.projected[3:7,], na.rm=TRUE)
return(output)}
ad_surv_temp = 1 # Can change accordingly (0.5-1)
p_adults <- matrix(c(0.00,0.59,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,ad_surv_temp,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,ad_surv_temp,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,ad_surv_temp,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,ad_surv_temp,ad_surv_temp), nrow = 7, byrow=TRUE)
growth_alone_simple(p_adults, site_details$TimeSpan[selection], site_details$Count[selection])
N <- 50 # number of accepted particles
adult_surv <- c() #Empty vector for chicks
i <- 0 # Initiate counter of accepted particles
j <- 0 # Initiate counter of proposed particles
year <- site_details$TimeSpan[selection]
simulated_timeseries<-Data$count
kept_timeseries<-Data$count
while(i <= N)
{
ad_surv_temp <- runif(1,0.5,1)
adult_surv <- c(adult_surv, ad_surv_temp)
p_adults <- matrix(c(0.00,0.59,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,ad_surv_temp,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,ad_surv_temp,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,ad_surv_temp,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,ad_surv_temp,ad_surv_temp), nrow = 7, byrow=TRUE)
D_star <- growth_alone_simple(p_adults, year, site_details$Count[selection])
simulated_timeseries<-cbind(simulated_timeseries,D_star)
MAPE_i <- mean(abs((Data$count-D_star)/Data$count), na.rm=TRUE) * 100
if(MAPE_i <= 81)
{
i <- i + 1 #update counter
kept_timeseries<-cbind(kept_timeseries,D_star)
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n")
}
Data<-BISC
N <- 50 # number of accepted particles
adult_surv <- c() #Empty vector for chicks
i <- 0 # Initiate counter of accepted particles
j <- 0 # Initiate counter of proposed particles
year <- site_details$TimeSpan[selection]
simulated_timeseries<-Data$count
kept_timeseries<-Data$count
while(i <= N)
{
ad_surv_temp <- runif(1,0.5,1)
adult_surv <- c(adult_surv, ad_surv_temp)
p_adults <- matrix(c(0.00,0.59,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,ad_surv_temp,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,ad_surv_temp,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,ad_surv_temp,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,ad_surv_temp,ad_surv_temp), nrow = 7, byrow=TRUE)
D_star <- growth_alone_simple(p_adults, year, site_details$Count[selection])
simulated_timeseries<-cbind(simulated_timeseries,D_star)
MAPE_i <- mean(abs((Data$count-D_star)/Data$count), na.rm=TRUE) * 100
if(MAPE_i <= 81)
{
i <- i + 1 #update counter
kept_timeseries<-cbind(kept_timeseries,D_star)
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n")
}
plot(Data$year,Data$count,pch=15,ylim=c(0,1000))
for (k in 1:min(j,2000))
{
lines(Data$year,simulated_timeseries[,k],col=rgb(0,0,0,0.1))
}
for (m in 1:i)
{
lines(Data$year,kept_timeseries[,m],col=rgb(1,0,0,1))
}
points(Data$year,Data$count,pch=15,col="darkblue")
abundance_fun <- function(Lmatrix, year, starters, intercept_temp, slope_temp){
G.projected <- matrix(0, nrow = nrow(Lmatrix), ncol = year+1)
G0 <-matrix(c(0,0,starters,0,0,0,0), ncol = 1)
G.projected[, 1] <- G0
immigration_storage <- c()
for (j in 1:year)
{
abundance <- colSums(G.projected[3:7,], na.rm=TRUE)
immigration <- rpois(1,pmax(0.001,intercept_temp+slope_temp*sum(abundance)))
immigration_storage[j] <- immigration
M <- matrix(c(0,0,immigration,0,0,0,0), ncol = 1) # migrant vector
G.projected[, j + 1] <- round((Lmatrix %*% (G.projected[,j]+M)), digits = 0)
}
immigration_storage <- c(immigration_storage, NA)
G.series <- colSums(G.projected[3:7,], na.rm=TRUE)
output <- cbind(G.series, immigration_storage)
return(output)}
selection<-site_details$Site=="BISC"
N <- 50 # number of accepted particles
keep <- matrix(ncol = 2, nrow = N) #Empty matrix to store results
intercept <- c()  #Empty vector to store results
slope <- c() #Empty vector to store results
i <- 0 # Initiate counter of accepted particles
j <- 0 # Initiate counter of proposed particles
year <- site_details$TimeSpan[selection]
keep_immigrants <- c()
simulated_timeseries<-Data$count
kept_timeseries<-Data$count
while(i <= N)
{
intercept_temp <- runif(1, -100, 100)
slope_temp <- runif(1, -50, 5)
intercept<- c(intercept, intercept_temp)
slope <- c(slope, slope_temp)
D_star <- abundance_fun(G_Max, year, site_details$Count[selection], intercept_temp, slope_temp)
simulated_timeseries<-cbind(simulated_timeseries,D_star[,1])
MAPE_i <- mean(abs((Data$count-D_star[,1])/Data$count), na.rm=TRUE) * 100
if(MAPE_i <= 177)
{
keep[i,] <- c(intercept_temp, slope_temp)
i <- i + 1 #update counter
kept_timeseries<-cbind(kept_timeseries,D_star[,1])
keep_immigrants <-cbind(keep_immigrants, D_star[,2])
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n")
}
plot(Data$year,Data$count,pch=15,ylim=c(0,4000)) # Shortened y-axis in order to see accepted sims
for (k in 1:min(j,2000))
{
lines(Data$year,simulated_timeseries[,k],col=rgb(0,0,0,0.1))
}
for (m in 1:i)
{
lines(Data$year,kept_timeseries[,m],col=rgb(1,0,0,1))
}
points(Data$year,Data$count,pch=15,col="darkblue")
selection<-site_details$Site=="BISC"
N <- 50 # number of accepted particles
keep <- matrix(ncol = 2, nrow = N) #Empty matrix to store results
intercept <- c()  #Empty vector to store results
slope <- c() #Empty vector to store results
i <- 0 # Initiate counter of accepted particles
j <- 0 # Initiate counter of proposed particles
year <- site_details$TimeSpan[selection]
keep_immigrants <- c()
simulated_timeseries<-Data$count
kept_timeseries<-Data$count
while(i <= N)
{
intercept_temp <- runif(1, -100, 100)
slope_temp <- runif(1, -50, 5)
intercept<- c(intercept, intercept_temp)
slope <- c(slope, slope_temp)
D_star <- abundance_fun(G_Max, year, site_details$Count[selection], intercept_temp, slope_temp)
simulated_timeseries<-cbind(simulated_timeseries,D_star[,1])
MAPE_i <- mean(abs((Data$count-D_star[,1])/Data$count), na.rm=TRUE) * 100
if(MAPE_i <= 177)
{
keep[i,] <- c(intercept_temp, slope_temp)
i <- i + 1 #update counter
kept_timeseries<-cbind(kept_timeseries,D_star[,1])
keep_immigrants <-cbind(keep_immigrants, D_star[,2])
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n")
}
plot(Data$year,Data$count,pch=15,ylim=c(0,4000)) # Shortened y-axis in order to see accepted sims
for (k in 1:min(j,2000))
{
lines(Data$year,simulated_timeseries[,k],col=rgb(0,0,0,0.1))
}
for (m in 1:i)
{
lines(Data$year,kept_timeseries[,m],col=rgb(1,0,0,1))
}
points(Data$year,Data$count,pch=15,col="darkblue")
plot(Data$year,Data$count,pch=15,ylim=c(0,1000)) # Shortened y-axis in order to see accepted sims
for (k in 1:min(j,2000))
{
lines(Data$year,simulated_timeseries[,k],col=rgb(0,0,0,0.1))
}
for (m in 1:i)
{
lines(Data$year,kept_timeseries[,m],col=rgb(1,0,0,1))
}
points(Data$year,Data$count,pch=15,col="darkblue")
site_details<-data.frame(c("ORNE","BISC","MOOT","VERN"),c(3,14,74,14),c(19,18,12,11),c(100,250,100,40))
colnames(site_details)<-c("Site","Count","TimeSpan","epsilon")
selection<-site_details$Site=="BISC"
# Post-breeding Matrix with maximum productivity (2 chicks)
G_2chicks <- matrix(c(0.00,0.59,0.75,0.80,0.89,0.89,0.89,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.75,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.80,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.89,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.89,0.89), nrow = 7, byrow=TRUE)
# Matrix with max productivity and max survival
G_Max <- matrix(c(0.00,1,1,1,1,1,1,
1,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,1,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,1,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,1,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,1,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,1,1), nrow = 7, byrow=TRUE)
# Matrix with max productivity and high survival to test on Biscoe Point
G_Bisc <- matrix(c(0.00,0.80,0.80,0.80,0.89,0.89,0.89,
0.80,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.80,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.80,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.89,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.89,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.89,0.89), nrow = 7, byrow=TRUE)
growth_alone_simple <- function(Lmatrix, year, starters){
G.projected <- matrix(0, nrow = nrow(Lmatrix), ncol = year+1)
G0 <-matrix(c(0,0,starters,0,0,0,0), ncol = 1)
G.projected[, 1] <- G0
for (j in 1:year)
{
G.projected[, j + 1] <- round((Lmatrix %*% (G.projected[,j])), digits = 0)
}
output <- colSums(G.projected[3:7,], na.rm=TRUE)
return(output)}
ad_surv_temp = 1 # Can change accordingly (0.5-1)
p_adults <- matrix(c(0.00,0.59,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,ad_surv_temp,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,ad_surv_temp,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,ad_surv_temp,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,ad_surv_temp,ad_surv_temp), nrow = 7, byrow=TRUE)
growth_alone_simple(p_adults, site_details$TimeSpan[selection], site_details$Count[selection])
N <- 50 # number of accepted particles
adult_surv <- c() #Empty vector for chicks
i <- 0 # Initiate counter of accepted particles
j <- 0 # Initiate counter of proposed particles
year <- site_details$TimeSpan[selection]
simulated_timeseries<-Data$count
kept_timeseries<-Data$count
while(i <= N)
{
ad_surv_temp <- runif(1,0.5,1)
adult_surv <- c(adult_surv, ad_surv_temp)
p_adults <- matrix(c(0.00,0.59,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,ad_surv_temp,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,ad_surv_temp,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,ad_surv_temp,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,ad_surv_temp,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,ad_surv_temp,ad_surv_temp), nrow = 7, byrow=TRUE)
D_star <- growth_alone_simple(p_adults, year, site_details$Count[selection])
simulated_timeseries<-cbind(simulated_timeseries,D_star)
MAPE_i <- mean(abs((Data$count-D_star)/Data$count), na.rm=TRUE) * 100
if(MAPE_i <= 81)
{
i <- i + 1 #update counter
kept_timeseries<-cbind(kept_timeseries,D_star)
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n")
}
plot(Data$year,Data$count,pch=15,ylim=c(0,1000)) # Shortened y-axis in order to see accepted sims
for (k in 1:min(j,2000))
{
lines(Data$year,simulated_timeseries[,k],col=rgb(0,0,0,0.1))
}
for (m in 1:i)
{
lines(Data$year,kept_timeseries[,m],col=rgb(1,0,0,1))
}
points(Data$year,Data$count,pch=15,col="darkblue")
abundance_fun <- function(Lmatrix, year, starters, intercept_temp, slope_temp){
G.projected <- matrix(0, nrow = nrow(Lmatrix), ncol = year+1)
G0 <-matrix(c(0,0,starters,0,0,0,0), ncol = 1)
G.projected[, 1] <- G0
immigration_storage <- c()
for (j in 1:year)
{
abundance <- colSums(G.projected[3:7,], na.rm=TRUE)
immigration <- rpois(1,pmax(0.001,intercept_temp+slope_temp*sum(abundance)))
immigration_storage[j] <- immigration
M <- matrix(c(0,0,immigration,0,0,0,0), ncol = 1) # migrant vector
G.projected[, j + 1] <- round((Lmatrix %*% (G.projected[,j]+M)), digits = 0)
}
immigration_storage <- c(immigration_storage, NA)
G.series <- colSums(G.projected[3:7,], na.rm=TRUE)
output <- cbind(G.series, immigration_storage)
return(output)}
selection<-site_details$Site=="BISC"
N <- 50 # number of accepted particles
keep <- matrix(ncol = 2, nrow = N) #Empty matrix to store results
intercept <- c()  #Empty vector to store results
slope <- c() #Empty vector to store results
i <- 0 # Initiate counter of accepted particles
j <- 0 # Initiate counter of proposed particles
year <- site_details$TimeSpan[selection]
keep_immigrants <- c()
simulated_timeseries<-Data$count
kept_timeseries<-Data$count
while(i <= N)
{
intercept_temp <- runif(1, -100, 100)
slope_temp <- runif(1, -50, 5)
intercept<- c(intercept, intercept_temp)
slope <- c(slope, slope_temp)
D_star <- abundance_fun(G_Max, year, site_details$Count[selection], intercept_temp, slope_temp)
simulated_timeseries<-cbind(simulated_timeseries,D_star[,1])
MAPE_i <- mean(abs((Data$count-D_star[,1])/Data$count), na.rm=TRUE) * 100
if(MAPE_i <= 177)
{
keep[i,] <- c(intercept_temp, slope_temp)
i <- i + 1 #update counter
kept_timeseries<-cbind(kept_timeseries,D_star[,1])
keep_immigrants <-cbind(keep_immigrants, D_star[,2])
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n")
}
plot(Data$year,Data$count,pch=15,ylim=c(0,4000)) # Shortened y-axis in order to see accepted sims
for (k in 1:min(j,2000))
{
lines(Data$year,simulated_timeseries[,k],col=rgb(0,0,0,0.1))
}
for (m in 1:i)
{
lines(Data$year,kept_timeseries[,m],col=rgb(1,0,0,1))
}
points(Data$year,Data$count,pch=15,col="darkblue")
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
20000/20
1000/60
10000*16
(10000*16)/(40*60)
Treatment = c(90, 91, 68, 90, 167, 26, 38, 89, 88, 99, 141, 123, 76, 88, 79, 96, 79, 202, 91, 193)
Control = c(52, 104, 146, 27, 46, 120, 5, 15, 11, 48, 30, 40, 8, 22, 74)
t.test(Treatment,Control)
Treatment = c(90, 91, 68, 90, 167, 26, 38, 89, 88, 99, 141, 123, 76, 88, 79, 96, 79, 202, 91, 93)
Control = c(52, 104, 146, 27, 46, 120, 5, 15, 11, 48, 30, 40, 8, 22, 74)
t.test(Treatment,Control)
Treatment = c(90, 91, 68, 90, 167, 26, 38, 89, 88, 99, 141, 123, 76, 88, 79, 96, 79, 202, 91, 23)
Control = c(52, 104, 146, 27, 46, 120, 5, 15, 11, 48, 30, 40, 8, 22, 74)
t.test(Treatment,Control)
Treatment = c(90, 91, 68, 90, 167, 26, 38, 89, 88, 99, 141, 123, 76, 88, 79, 96, 79, 202, 11, 23)
Control = c(52, 104, 146, 27, 46, 120, 5, 15, 11, 48, 30, 40, 8, 22, 74)
t.test(Treatment,Control)
Treatment = c(90, 91, 68, 90, 167, 26, 38, 89, 88, 99, 141, 123, 76, 88, 79, 96, 79, 122, 11, 23)
Control = c(52, 104, 146, 27, 46, 120, 5, 15, 11, 48, 30, 40, 8, 22, 74)
t.test(Treatment,Control)
Treatment = c(90, 91, 68, 90, 167, 26, 38, 89, 88, 99, 41, 123, 76, 88, 79, 96, 79, 122, 11, 23)
Control = c(52, 104, 146, 27, 46, 120, 5, 15, 11, 48, 30, 40, 8, 22, 74)
t.test(Treatment,Control)
Treatment = c(90, 91, 68, 90, 167, 26, 38, 89, 88, 99, 41, 123, 76, 88, 79, 96, 79, 122, 11, 23)
Control = c(52, 104, 146, 27, 46, 120, 5, 15, 11, 48, 30, 40, 8, 42, 74)
t.test(Treatment,Control)
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
