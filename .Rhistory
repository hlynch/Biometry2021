# }
}", fill = TRUE)
sink()
set.seed(5)
sigma_sim <- .15
sigma_site_sim <- .05
gamma_sim <- 0
eta_sim <- rnorm(n_sites, 0, sigma_site_sim)
alpha_sim <- rbeta(nrow(abundance_chicks), a, b)
site_n <- model_data$site_n
season_n <- model_data$season_n
site_c <- model_data$site_c
season_c <- model_data$season_c
s <- model_data$s
# region <- model_data$region
# ccamlr <- model_data$ccamlr
sigma_n <- abundance_nests$sigma
sigma_c <- abundance_chicks$sigma
sigma_i <- abundance_initial$sigma
y_n_sim <- y_c_sim <- y_i_sim <- z_c_sim <- N_sim <- gl_a_sim <- gl_p_sim <- NA
zr_sim <-  NA ###
lz_sim <- array(NA, dim = c(n_sites, n_seasons))
l_a_sim <- l_p_sim <- lw_a_sim <- lw_p_sim <- array(NA, dim = c(n_sites, (n_seasons - 1)))
for (i in 1:n_sites) {
lz_sim[i, s[i]] <- rnorm(1, log(1000), .75)
for (t in (s[i] + 1):n_seasons) {
zr_sim[i] <- gamma_sim + eta_sim[i]
lz_sim[i, t] <- rnorm(1, lz_sim[i, (t - 1)] + zr_sim[i], sigma_sim)
}
for (t in 1:(s[i] - 1)) {
zr_sim[i] <- gamma_sim + eta_sim[i]
lz_sim[i, (s[i] - t)] <- rnorm(1, lz_sim[i, (s[i] - t + 1)] - zr_sim[i], sigma_sim)
}
}
for (i in 1:nrow(abundance_nests)) {
y_n_sim[i] <- rnorm(1, lz_sim[site_n[i], season_n[i]], sd = sigma_n[i])
}
for (i in 1:nrow(abundance_chicks)) {
N_sim[i] <- as.integer(2 * round(exp(lz_sim[site_c[i], season_c[i]])))
z_c_sim[i] <- base::max(rbinom(1, N_sim[i], prob = alpha_sim[i]), 1)
y_c_sim[i] <- rnorm(1, log(z_c_sim[i]), sd = sigma_c[i])
}
for (i in 1:nrow(abundance_initial)) {
y_i_sim[i] <- rnorm(1, lz_sim[i, s[i]]- sigma_i[i]^2 / 2, sd = sigma_i[i])
}
for (i in 1:n_sites) {
for (t in 2:n_seasons) {
l_a_sim[i, t - 1] <- exp(lz_sim[i, t] - lz_sim[i, t - 1])
l_p_sim[i, t - 1] <- exp(zr_sim[i])
if (w[i, t] == 1 & w[i, t - 1] == 1) {
lw_a_sim[i, t - 1] <- l_a_sim[i, t - 1]
lw_p_sim[i, t - 1] <- l_p_sim[i, t - 1]
} else {
lw_a_sim[i, t - 1] <- 1
lw_p_sim[i, t - 1] <- 1
}
}
}
for (i in 1:n_sites) {
gl_a_sim[i] <- prod(lw_a_sim[i, ])^(1/(sum(w[i, 1:n_seasons]) - 1))
gl_p_sim[i] <- prod(lw_p_sim[i, ])^(1/(sum(w[i, 1:n_seasons]) - 1))
}
# create the data list for the JAGS model
model_sim <- list(
nests = nrow(abundance_nests),
y_n = y_n_sim,
precision_n = abundance_nests$precision,
site_n = abundance_nests$site,
season_n = abundance_nests$season_relative,
chicks = nrow(abundance_chicks),
y_c = y_c_sim,
precision_c = abundance_chicks$precision,
site_c = abundance_chicks$site,
season_c = abundance_chicks$season_relative,
y_i = y_i_sim,
precision_i = abundance_initial$precision,
n_sites = n_sites,
n_seasons = n_seasons,
# n_regions = n_regions,
# n_ccamlr = n_ccamlr,
s = as.vector(SiteList$initial_season),
# region = as.vector(SiteList$region),
# ccamlr = as.vector(SiteList$ccamlr),
w = w,
a = a,
b = b)
save(model_sim, file = "model_sim.rda")
random_inits <- function(model_data) {
seed = runif(1, 1, 100000)
gamma <- runif(1, -.025, .025)
# sigma_region <- runif(1, .05, .1)
sigma_site <- runif(1, .025, .05)
# sigma_season <- runif(1, .05, .1)
sigma <- runif(1, .05, .1)
chicks <- model_sim$chicks
n_sites <- model_sim$n_sites
n_seasons <- model_sim$n_seasons
# n_regions <- model_sim$n_regions
s <- model_sim$s
# region <- model_sim$region
# ccamlr <- model_sim$ccamlr
y_c <- model_sim$y_c
y_i <- model_sim$y_i
site_c <- model_sim$site_c
season_c <- model_sim$season_c
a <- model_sim$a
b <- model_sim$b
eta <- rnorm(n_sites, 0, sigma_site)
alpha <- rbeta(chicks, a, b)
zr <- NA ###
lz <- array(NA, dim = c(n_sites, n_seasons))
for (i in 1:n_sites) {
lz[i, s[i]] <- mean(y_i[i], na.rm = TRUE)
for (t in (s[i] + 1):n_seasons) {
zr[i] <- gamma + eta[i]
lz[i, t] <- rnorm(1, lz[i, (t - 1)] + zr[i], sigma)
}
for (t in 1:(s[i] - 1)) {
zr[i] <- gamma + eta[i]
lz[i, (s[i] - t)] <- rnorm(1, lz[i, (s[i] - t + 1)] - zr[i], sigma)
}
}
z_c <- N <- NA
for (i in 1:chicks) {
if (lz[site_c[i], season_c[i]] < 0) lz[site_c[i], season_c[i]] <- 0
N[i] <- 2 * round(exp(lz[site_c[i], season_c[i]]))
z_c[i] <- base::max(rbinom(1, prob = alpha[i], N[i]), 1)
}
return(list(
sigma = sigma,
# sigma_region = sigma_region,
sigma_site = sigma_site,
# sigma_season = sigma_season,
gamma = gamma,
# beta = beta,
eta = eta,
# epsilon = epsilon,
alpha = alpha,
lz = lz,
z_c = z_c,
.RNG.name = "base::Mersenne-Twister",
.RNG.seed = seed))
}
save(random_inits, file = "random_inits.rda")
expect_error(random_inits(model_sim), NA)
n.chains <- 6
n.adapt <- 3000
n.update <- 200000
n.iter <- 100000
thin <- 100
cl <- makeCluster(n.chains)
cvars <- c("model_sim", "n.adapt", "n.update", "n.iter", "thin", "params", "random_inits")
params <- c("gamma", "sigma", "sigma_site", "alpha", "eta", "z_c", "lz", "gl_a", "l_a", "y_i_new",
"y_n_new", "y_c_new", "y_n_sqs", "y_n_sqs_new",
"y_i_sqs_new", "y_i_sqs", "y_c_sqs", "y_c_sqs_new")
parallel::clusterExport(cl, cvars)
out <- clusterEvalQ(cl, {
library(rjags)
inits <- random_inits(model_sim)
jm = jags.model("jags_model.jags", data = model_sim, n.chains = 1, n.adapt = n.adapt,
inits = inits)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = params, n.iter = n.iter, thin = thin)
return(as.mcmc(zm))
})
stopCluster(cl)
2290*1797
1096*506
718*477
639*388
551*504
595*457
3222*2097
2809*2683
673*594
X<-seq(1,20)
value<-c()
for (i in 1:20)
{
value<-c(value,rnorm(1,mu=0.15-2.2*X[i],sigma=2))
}
X<-seq(1,20)
value<-c()
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=0.15-2.2*X[i],sigma=2))
}
X<-seq(1,20)
value<-c()
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=0.15-2.2*X[i],sd=2))
}
value
plot(X,value)
fit<-lm(value~X)
fit
summary(fit)
X<-seq(1,20)
value<-c()
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=0.15-2.2*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,20)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,20)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,20)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,20)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,20)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,20)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:20)
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=5))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=1))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=1))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-1
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-1
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-1
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-1
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-1
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-2
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-5
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-5
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-5
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-10
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-10
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-10
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
X<-seq(1,30)
value<-c()
intercept<-0.15
slope<--2.2
sigma<-10
for (i in 1:length(X))
{
value<-c(value,rnorm(1,mean=intercept+slope*X[i],sd=sigma))
}
fit<-lm(value~X)
summary(fit)
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
library(rmarkdown)
install.packages("rmarkdown")
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
library(mappdr)
library(mapppdr)
vignette("mappdr")
vignette("mapppdr")
