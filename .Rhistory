pattern[4,6]<-1
pattern[6,7]<-1
pattern
pattern<-matrix(0,ncol=10,nrow=10)
pattern[5,5]<-1
pattern[4,5]<-1
pattern[6,5]<-1
pattern[5,6]<-1
pattern[4,6]<-1
pattern[6,7]<-1
pattern[6,6]<-1
pattern
?dbinom
grid<-matrix(rbinom(25,size=1,p=0.5),ncol=5,nrow=5)
pattern
grid
starting.pattern<-matrix(rbinom(100,size=1,0.5),ncol=10,nrow=10)
starting.pattern
install.packages("raster")
library("raster", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
?resample
r <- raster(nrow=3, ncol=3)
values(r) <- 1:ncell(r)
s <- raster(nrow=10, ncol=10)
s <- resample(r, s, method='bilinear')
s
s$layer
s$values
length(s)
s[1]
plot(s)
plot(r)
downsampled<-aggregate(starting.pattern, fact=2, fun=sum)
downsampled<-aggregate(starting.pattern, fact=2, fun=mean)
downsampled<-aggregate(as.raster(starting.pattern), fact=2, fun=mean)
as.raster(starting.pattern)
starting.pattern
?as.raster
starting.pattern<-raster(rbinom(100,size=1,0.5),ncol=10,nrow=10)
downsampled<-aggregate(as.raster(starting.pattern), fact=2, fun=mean)
starting.pattern<-raster(rbinom(100,size=1,0.5),ncol=10,nrow=10)
starting.pattern<-raster(ncol=10,nrow=10)
values(starting.pattern)<-rbinom(100,size=1,0.5)
starting.pattern
plot(starting.pattern)
downsampled<-aggregate(starting.pattern, fact=2, fun=mean)
plot(downsampled)
downsampled<-aggregate(starting.pattern, fact=2, fun=sum)
plot(downsampled)
?`values,Raster-method`
real.pattern<-raster(ncol=10,nrow=10)
values(real.pattern)<-0
plot(real.pattern)
values(real.pattern,5,5)<-1
values(real.pattern)[5,5]<-1
real.pattern[5,5]<-1
plot(real.pattern)
dbinom(5,10,0.5)
dbinom(0,10,0.5)
dbinom(1,10,0.5)
dbinom(seq(0,10,1),10,0.5)
sum(dbinom(seq(0,10,1),10,0.5))
real.pattern<-raster(ncol=10,nrow=10)
values(real.pattern)<-0
real.pattern[5,5]<-1
real.pattern[4,5]<-1
real.pattern[6,5]<-1
real.pattern[5,6]<-1
real.pattern[4,6]<-1
real.pattern[6,7]<-1
real.pattern[6,6]<-1
real.downsampled<-aggregate(real.pattern, fact=2, fun=mean)
plot(real.downsampled)
starting.pattern<-raster(ncol=10,nrow=10)
values(starting.pattern)<-rbinom(100,size=1,0.5)
downsampled<-aggregate(starting.pattern, fact=2, fun=sum)
plot(downsampled)
dbinom(downsampled,4,prob=real.downsampled,log=T)
downsampled
values(downsampled)
dbinom(values(downsampled),4,prob=values(real.downsampled),log=T)
dbinom(values(downsampled),4,prob=values(real.downsampled))
values(downsampled)
real.pattern<-raster(ncol=10,nrow=10)
values(real.pattern)<-0
real.pattern[5,5]<-1
real.pattern[4,5]<-1
real.pattern[6,5]<-1
real.pattern[5,6]<-1
real.pattern[4,6]<-1
real.pattern[6,7]<-1
real.pattern[6,6]<-1
real.downsampled<-aggregate(real.pattern, fact=2, fun=mean)
values(downsampled)
values(real.downsampled)
dbinom(values(downsampled),4,prob=values(real.downsampled))
values(real.downsampled)
dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled))))
sum(dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)
sum(dbinom(values(downsampled),4,prob=0.5,log=T)
))
sum(dbinom(values(downsampled),4,prob=0.5,log=T)))
sum(dbinom(values(downsampled),4,prob=0.5,log=T))
sum(dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)
sum(-dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)
sum(-dbinom(values(downsampled),4,prob=0.5,log=T))
plot(downsampled)
plot(real.downsampled)
plot(downsampled)
sum(-dbinom(values(downsampled),4,prob=rep(0.5,times=length(values(downsampled))),log=T))
dbinom(values(downsampled),4,prob=rep(0.5,times=length(values(downsampled))))
dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled))))
plot(dbinom(values(downsampled),4,prob=rep(0.5,times=length(values(downsampled)))))
plot(dbinom(values(downsampled),4,prob=rep(0.5,times=length(values(downsampled)))),typ="l")
lines(dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),col=2)
plot(dbinom(values(downsampled),4,prob=rep(0.5,times=length(values(downsampled)))),typ="l",ylim=c(0,1))
lines(dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),col=2)
plot(dbinom(values(downsampled),4,prob=rep(0.5,times=length(values(downsampled))),log=TRUE),typ="l",ylim=c(0,1))
plot(dbinom(values(downsampled),4,prob=rep(0.5,times=length(values(downsampled)))),typ="l",ylim=c(0,1))
lines(dbinom(values(downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),col=2)
?mod
?modulo
?raster
i=1
index<-i%%100
index
cube<-array(dim=c(10,10,1000))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
i=1
index<-i%%100
index
values(test.pattern)
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
values(test.pattern)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
exp(likelihood-new.likelihood)
ratio<-min(1,exp(likelihood-new.likelihood))
runif(1,0,1)>ratio
cube[,,i]<-test.pattern
dim(cube)
i
cube[,,1]<-test.pattern
as.matrix(test.pattern)
cube[,,i]<-as.matrix(test.pattern)
i=2
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
ratio
cube[,,i]<-as.matrix(test.pattern)
i=3
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
ratio
cube[,,i]<-as.matrix(test.pattern)
i=4
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
ratio
cube<-array(dim=c(10,10,1000))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:1000)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
}
}
cube<-array(dim=c(10,10,1000))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:1000)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
}
ratio.store<-c(ratio.store,ratio)
}
table(ratio.store)
hist(ratio.store)
cube<-array(dim=c(10,10,1000))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:1000)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
}
changes
hist(ratio.store)
iterations<-1000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:iterations)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
}
hist(ratio.store)
changes
plot(ratio)
plot(ratio.store)
?larray
?lapply
plot(apply(grid,fun=mean,3))
?apply
plot(apply(grid,margin=3,fun=mean))
apply(grid,margin=3,fun=mean)
plot(apply(cube,margin=3,fun=mean))
plot(apply(cube,3,mean))
apply(cube,3,mean)
cube[,,1]
cube[,,2]
iterations<-1000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:iterations)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
cube[,,i]<-as.matrix(test.pattern)
}
plot(ratio.store)
apply(cube,3,mean)
plot(apply(cube,3,mean))
dim(cube)
plot(cube[,,1])
plot(as.matrix(cube[,,1]))
dim(cube[,,1])
plot(cube[,,1])
plot(as.raster(cube([,,1]))
plot(as.raster(cube[,,1]))
plot(as.raster(cube[,,2]))
plot(as.raster(cube[,,3]))
?as.raster
plot(as.matrix(cube[,,3]))
plot(cube[,,1])
plot(as.matrix(cube[,,3]))
(as.matrix(cube[,,3])
image(cube[,,1])
image(cube[,,2])
image(cube[,,3])
image(apply(cube[,,],3,mean))
image(apply(cube,3,mean))
apply(cube,3,mean)
dim(cube)
apply(cube,3,mean)
as.matrix(apply(cube,3,mean),ncol=10,nrow=10)
image(as.matrix(apply(cube,3,mean),ncol=10,nrow=10))
head(cube)
apply(cube,c(1,2),mean)
image(apply(cube,c(1,2),mean))
image(starting.pattern,mean))
image(starting.pattern)
iterations<-10000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:iterations)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
cube[,,i]<-as.matrix(test.pattern)
}
image(starting.pattern)
image(apply(cube,c(1,2),mean))
plot(ratio.stro)
plot(ratio.store)
changes
iterations<-100000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:iterations)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
cube[,,i]<-as.matrix(test.pattern)
}
i
image(apply(cube[,,1:50000],c(1,2),mean))
image(cube[,,1])
image(cube[,,2])
image(cube[,,3])
image(cube[,,400])
image(cube[,,4000])
image(cube[,,40000])
image(cube[,,50000])
iterations<-10000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
likelihood.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 1:iterations)
{
index<-i%%100
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
} else {
likelihood<-new.likelihood #changes accepted, and likelihood is updated
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
cube[,,i]<-as.matrix(test.pattern)
}
image(apply(cube,c(1,2),mean))
101%%100
100%%100
99%%100
100%%101
101%%101
0%%100
1%%100
99%%100
100%%100
100%%101
plot(likelihood.store)
iterations<-10000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
likelihood.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
for (i in 0:iterations)
{
index<-i%%100+1
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.5,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
} else {
likelihood<-new.likelihood #changes accepted, and likelihood is updated
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
cube[,,i]<-as.matrix(test.pattern)
}
image(apply(cube,c(1,2),mean))
plot(likelihood.store)
plot(real.pattern)
iterations<-10000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
likelihood.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.1,times=length(values(test.downsampled))),log=T))
for (i in 0:iterations)
{
index<-i%%100+1
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.1,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
} else {
likelihood<-new.likelihood #changes accepted, and likelihood is updated
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
cube[,,i]<-as.matrix(test.pattern)
}
image(apply(cube,c(1,2),mean))
plot(likelihood.store)
image(apply(cube[,,1000:iterations],c(1,2),mean))
iterations<-100000
cube<-array(dim=c(10,10,iterations))
test.pattern<-raster(ncol=10,nrow=10)
values(test.pattern)<-rbinom(100,size=1,0.5)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
ratio.store<-c()
likelihood.store<-c()
changes<-0
likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.1,times=length(values(test.downsampled))),log=T))
for (i in 0:iterations)
{
index<-i%%100+1
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1)
test.downsampled<-aggregate(test.pattern, fact=2, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),4,prob=pmin(0.99,pmax(0.01,values(real.downsampled)))),log=T)+sum(-dbinom(values(test.downsampled),4,prob=rep(0.1,times=length(values(test.downsampled))),log=T))
ratio<-min(1,exp(likelihood-new.likelihood))
if (runif(1,0,1)>ratio) {
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
changes<-changes+1
} else {
likelihood<-new.likelihood #changes accepted, and likelihood is updated
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
cube[,,i]<-as.matrix(test.pattern)
}
image(apply(cube,c(1,2),mean))
image(grid[,,1])
image(cube[,,1])
image(cube[,,2])
image(cube[,,3])
image(cube[,,4])
image(cube[,,5])
image(cube[,,6])
image(cube[,,7])
image(test.pattern)
image(real.downsampled)
test.pattern
plot(likelihood.store)
