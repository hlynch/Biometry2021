}
median.abundance <- apply(abundance, 2, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 2, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 1, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)))
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=30)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=20)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
dim(median.abundance)
dim(abundance)
length(median.abundance)
m<-1000
sigma <- 0.10
n <- 100    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,8,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
length(median.abundance)
length(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.20
n <- 100    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,8,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.20
n <- 100    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,9,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.50
n <- 100    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,9,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.50
n <- 100    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,10,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.23
n <- 100    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,10,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.23
n <- 1000    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,8,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
m<-1000
sigma <- 0.23
n <- 1000    # redo for all n in c(10,100,1000)
abundance <- array(data=NA, dim=c(n, m))
for (j in 1:n) # iterate over the colonies to be summed
{
abundance[j,] <- rlnorm(m,8,sigma)  # approximately but not exactly 10% error
}
median.abundance <- apply(abundance, 1, FUN=median) # take the median abundance for each colony
mean.abundance <- apply(abundance, 1, FUN=mean) # take the median abundance for each colony
sum.median <- sum(median.abundance)
sum.mean <- sum(mean.abundance)
sum.abundance <- apply(abundance, 2, FUN=sum)
median.sum <- median(sum.abundance)
mean.sum <- mean(sum.abundance)
hist(sum.abundance,xlim=c(mean.sum-5*sd(sum.abundance),mean.sum+5*sd(sum.abundance)),breaks=15)
abline(v=mean.sum,col="yellow",lwd=2)
abline(v=median.sum,col="purple",lwd=2)
abline(v=sum.median,col="blue",lwd=2)
abline(v=sum.mean,col="green",lwd=2)
mean.sum
median.sum
sum.mean
candy_color<-c("brown","yellow","green","red","orange","blue")
company<-c(0.14,0.14,0.16,0.13,0.19,0.24)
my_bag<-c(1,1,2,2,10,7)
color_prob<-data.frame(candy_color,company,my_bag,stringsAsFactors = FALSE)
head(color_prob)
sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE))
sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)
color_prob$candy_color
for (i in 1:100){
if((table(sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)))==color_prob$my_bag){
print(1)
} else print(0)
}
sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)
color_prob$my_bag
table(sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE))
my_bag<-sample(size=29,
color_prob$candy_color,
prob=color_prob$company,
replace=TRUE)
my_bag
may_bag=="red"
my_bag=="red"
as.numeric(my_bag=="red")
sum(as.numeric(my_bag=="red"))
number.red<-sum(as.numeric(my_bag=="red"))
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
darwin
hist(darwin)
hist(darwin$y)
sort(darwin$y)
library(readxl)
savedrecs <- read_excel("~/Downloads/savedrecs.xls")
View(savedrecs)
hist(savedrecs$`Publication Year`)
hist(savedrecs$`Publication Year`,breaks=30)
hist(savedrecs$`Publication Year`,breaks=50)
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
?read.txt
?read.text
?scan
?read.table
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
library(readxl)
Boron_Project_Luczaj_Groundwater_Chemistry_Data_3_19_2021 <- read_excel("~/Desktop/Boron-Project-Luczaj-Groundwater-Chemistry-Data-3-19-2021.xlsx")
View(Boron_Project_Luczaj_Groundwater_Chemistry_Data_3_19_2021)
boron.data<-Boron_Project_Luczaj_Groundwater_Chemistry_Data_3_19_2021
?cor
plot(boron.data$`Boron (µg/L)`,boron.data$`Boron Isotope`)
plot(boron.data$`Boron (µg/L)`,boron.data$`Boron Isotope`,pch=16)
plot(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),pch=16)
cor(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),method="spearman")
cor(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),method="spearman",na.rm=TRUE)
cor(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),method="spearman",use="pairwise.complete.obs")
install.packages("SpatialPack")
?murray
library("SpatialPack", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
?murray
?cor.spatial
x<-boron.data$`Boron (µg/L)`
y<-boron.data$`Boron Isotope`
lat<-boron.data$Latitude
long<-boron.data$Longitude
coords<-cbind(lat,long)
head(coords)
cor.spatial(x,y,coords)
sqrt(0.005747076)
cor.spatial(log10(x),log10(y),coords)
log10(x)
x
log10(y)
y
modified.ttest(x, y, coords, nclass = 13)
modified.ttest(log10(x), log10(y), coords, nclass = 13)
pf(31.0037,1,34.3718)
1-pf(31.0037,1,34.3718)
?cor.spatial
?modified.ttest
tjostheims.results<-cor.spatial(x,y,coords)
tjostheims.results<-cor.spatial(log10(x),log10(y),coords)
tjostheims.results
cor.spatial
rank(x)
plot(rank(x),rank(log10(x)))
tjostheims.results<-cor.spatial(x,y,coords)
tjostheims.results
tjostheims.results<-cor.spatial(log10(x),log10(y),coords)
tjostheims.results
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
1-pf( 81.8272,1,67.8295)
cor.test(x,y,method="Pearsons")
cor.test(x,y,method="spearman")
cor.test(log10(x),log10(y),method="spearman")
data("murray")
plot(murray$As,murray$Pb)
plot(log10(murray$As),log10(murray$Pb))
summary(modified.ttest)
range(lat)
range(long)
x<-boron.data$`Lithium (µg/L)`
tjostheims.results<-cor.spatial(x,y,coords)
tjostheims.results
tjostheims.results<-cor.spatial(log10(x),log10(y),coords)
tjostheims.results
cbind(x,y)
x<-boron.data$`Boron (µg/L)`
y<-boron.data$`Boron Isotope`
na.rows<-ia.na(x)|ia.na(x)
na.rows<-is.na(x)|is.na(x)
na.rows
rows.to.keep<-!is.na(x)&!is.na(y)
x<-boron.data$`Boron (µg/L)`
y<-boron.data$`Boron Isotope`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
cor.spatial(x,y,coords)
cor.spatial(log10(x),log10(y),coords)
sqrt(0.01086946)
tjostheims.results<-cor.spatial(x,y,coords)
length(tjostheims.results)
names(tjostheims.results)
tjostheims.results
tjostheims.results[1]
tjostheims.results[2]
names(tjostheims.results[1])
length(tjostheims.results[1])
tjostheims.results[1]
tjostheims.results[[1]]
tjostheims.results[[2]]
tjostheims.results[1][1]
tjostheims.results[1][2]
variance(tjostheims.results)
cor.spatial
tjostheims.results$var
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
x<-boron.data$`Lithium (µg/L)`
y<-boron.data$`Boron Isotope`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
tjostheims.results
sqrt(0.01086946)
modified.ttest(x, y, coords, nclass = 13)
codispersion<-codisp(x,y,coords)
plot(codispersion)
x<-boron.data$`Boron (µg/L)`
y<-boron.data$`Boron Isotope`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest(x, y, coords, nclass = 13)
modified.ttest(log10(x), log10(y), coords, nclass = 13)
codisp(x,y,coords)
?codisp
plot(codispersion)
codisp
boron.data<-Boron_Project_Luczaj_Groundwater_Chemistry_Data_3_19_2021
plot(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),pch=16)
cor(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),method="spearman",use="pairwise.complete.obs")
x<-boron.data$`Boron (µg/L)`
y<-boron.data$`Boron Isotope`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
#> cor.spatial(x,y,coords)
#[1] 0.002354357
#attr(,"variance")
#[1] 0.01086946
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
x<-boron.data$`Lithium (µg/L)`
y<-boron.data$`Boron Isotope`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
#> cor.spatial(x,y,coords)
#[1] 0.002354357
#attr(,"variance")
#[1] 0.01086946
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
library(SpatialPack)
Boron_Project_Luczaj_Groundwater_Chemistry_Data_3_19_2021 <- read_excel("~/Desktop/Boron-Project-Luczaj-Groundwater-Chemistry-Data-3-19-2021.xlsx")
boron.data<-Boron_Project_Luczaj_Groundwater_Chemistry_Data_3_19_2021
plot(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),pch=16)
cor(log10(boron.data$`Boron (µg/L)`),log10(boron.data$`Boron Isotope`),method="spearman",use="pairwise.complete.obs")
x<-boron.data$`Boron (µg/L)`
y<-boron.data$`Lithium (µg/L)`
#y<-boron.data$`Boron Isotope`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
#> cor.spatial(x,y,coords)
#[1] 0.002354357
#attr(,"variance")
#[1] 0.01086946
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
x<-boron.data$`Boron Isotope`
y<-boron.data$`Boron (µg/L)`
#y<-boron.data$`Lithium (µg/L)`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
#> cor.spatial(x,y,coords)
#[1] 0.002354357
#attr(,"variance")
#[1] 0.01086946
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
x<-boron.data$`Boron Isotope`
#y<-boron.data$`Boron (µg/L)`
y<-boron.data$`Lithium (µg/L)`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
#> cor.spatial(x,y,coords)
#[1] 0.002354357
#attr(,"variance")
#[1] 0.01086946
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
x<-boron.data$`Boron Isotope`
#y<-boron.data$`Boron (µg/L)`
#y<-boron.data$`Lithium (µg/L)`
y<-boron.data$`Chloride (mg/L)`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
tjostheims.results<-cor.spatial(x,y,coords)
#> cor.spatial(x,y,coords)
#[1] 0.002354357
#attr(,"variance")
#[1] 0.01086946
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
x<-boron.data$`Boron Isotope`
#y<-boron.data$`Boron (µg/L)`
#y<-boron.data$`Lithium (µg/L)`
y<-boron.data$`Chloride (mg/L)`
rows.to.keep<-!is.na(x)&!is.na(y)
x<-x[rows.to.keep]
y<-y[rows.to.keep]
lat<-boron.data$Latitude[rows.to.keep]
long<-boron.data$Longitude[rows.to.keep]
coords<-cbind(lat,long)
#tjostheims.results<-cor.spatial(x,y,coords)
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest
modified.ttest<-modified.ttest(log10(x), log10(y), coords, nclass = 13)
modified.ttest
modified.ttest<-modified.ttest(x, y, coords, nclass = 13)
modified.ttest.log10<-modified.ttest(log10(x), log10(y), coords, nclass = 13)
modified.ttest
modified.ttest.log10
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
