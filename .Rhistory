changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
#for (i in 1:length(test.downsampled)) #loops through every grid cell
#{
#  if (is.na(test.downsampled[i])) {test.downsampled[i]<-0} #in areas with no guano, set to 0 rather than NA
#}
likelihood<-sum(-dbinom(values(test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))
for (i in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",round(likelihood,digits=2)))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
image(cube)
cube1<-cube
for (i in (iterations+1):(2*iterations))
{
#  index<-i%%length(highres_grid)+1
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",round(likelihood,digits=2)))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store)
plot(likelihood.store[10000:20000])
image(cube)
image(cube1)
cube2<-cube
for (i in (2*iterations+1):(3*iterations))
{
#  index<-i%%length(highres_grid)+1
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",round(likelihood,digits=2)))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
image(cube)
plot(likelihood.store[10000:30000])
for (i in (3*iterations+1):(4*iterations))
{
#  index<-i%%length(highres_grid)+1
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",round(likelihood,digits=2)))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store[10000:40000])
image(cube)
for (i in (4*iterations+1):(5*iterations))
{
#  index<-i%%length(highres_grid)+1
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
new.likelihood<-sum(-dbinom(values(test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",round(likelihood,digits=2)))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store[10000:50000])
image(cube)
iterations<-10000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
#for (i in 1:length(test.downsampled)) #loops through every grid cell
#{
#  if (is.na(test.downsampled[i])) {test.downsampled[i]<-0} #in areas with no guano, set to 0 rather than NA
#}
i=0
index<-sample(3:(length(test.pattern)-2),1)
index
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1)
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
likelihood<-sum(-dbinom(values(test.downsampled)[(index-2):(index+2)],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[(index-2):(index+2)]))),log=T)+sum(-dbinom(values(prior)[(index-2):(index+2)],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[(index-2):(index+2)])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[(index-2):(index+2)],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[(index-2):(index+2)]))),log=T)+sum(-dbinom(values(prior)[(index-2):(index+2)],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[(index-2):(index+2)])),log=T))
exp(new.likelihood-likelihood)
new.likelihood
likelihood
values(test.downsampled)[(index-2):(index+2)]
image(test.pattern)
image(test.downsampled)
values(test.downsampled)
values(test.downsampled)[(index-2):(index+2)]
i=0
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
old.test.downsampled<-test.downsampled
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
which(test.downsampled!=old.test.downsampled)
dim(test.downsampled)
dim(old.test.downsampled)
values(test.downsampled)
which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
exp(new.likelihood-likelihood)
new.likelihood
likelihood
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
exp(new.likelihood-likelihood)
iterations<-10000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
#for (i in 1:length(test.downsampled)) #loops through every grid cell
#{
#  if (is.na(test.downsampled[i])) {test.downsampled[i]<-0} #in areas with no guano, set to 0 rather than NA
#}
for (i in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
old.test.downsampled<-test.downsampled
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,likelihood)
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",round(likelihood,digits=2)))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
image(cube)
iterations<-10000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
for (i in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",round(likelihood,digits=2)))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
image(cube)
iterations<-10000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
for (i in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
iterations<-10000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
for (i in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m))),log=T))+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store)
iterations<-10000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
for (i in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m))),log=T))+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store)
image(cube)
iterations<-10000
burn.in<- 5000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
for (i in 0:burn.in)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m))),log=T))+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store)
iterations<-10000
burn.in<- 5000
test.pattern<-resample(guano_30m,highres_grid,method="ngb")
cube<-array(dim=c(nrow(highres_grid),nrow(highres_grid)))
for (i in 1:length(test.pattern)) #loops through every grid cell
{
#  if (is.na(test.pattern[i])) {test.pattern[i]<-0} #in areas with no guano, set to 0 rather than NA
test.pattern[i]<-0
}
cube<-t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
prior<-test.downsampled
ratio.store<-c()
likelihood.store<-c()
changes<-0
size.ratio<-6
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
for (i in 0:burn.in)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",i,"  ","Percent change: ",round(changes/i,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m))),log=T))+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))))
#cube[,,i]<-as.matrix(test.pattern)
#  cube<-(i/(i+1))*cube+(1/(i+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store)
for (j in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",j,"  ","Percent change: ",round(changes/j,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m))),log=T))+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(j/(j+1))*cube+(1/(j+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
for (j in 0:iterations)
{
#  index<-i%%length(highres_grid)+1
old.test.downsampled<-test.downsampled
index<-sample(3:(length(test.pattern)-2),1)
values(test.pattern)[(index-2):(index+2)]<-abs(values(test.pattern)[(index-2):(index+2)]-1) #changes pixel labeled by index
test.downsampled<-aggregate(test.pattern, fact=size.ratio, fun=sum)
changed<-which(values(test.downsampled)!=values(old.test.downsampled))
likelihood<-sum(-dbinom(values(old.test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
new.likelihood<-sum(-dbinom(values(test.downsampled)[changed],size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)[changed]))),log=T)+sum(-dbinom(values(prior)[changed],size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m)[changed])),log=T))
ratio<-min(1,exp(new.likelihood-likelihood))
if (runif(1,0,1)>ratio) { #reject
values(test.pattern)[index]<-abs(values(test.pattern)[index]-1) #if reject the change, go back where you were
} else { #accept
#    likelihood<-new.likelihood #changes accepted, and likelihood is updated
changes<-changes+1
}
ratio.store<-c(ratio.store,ratio)
likelihood.store<-c(likelihood.store,sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m)))),log=T)+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T)))
print(paste("Iteration: ",j,"  ","Percent change: ",round(changes/j,digits=2),"  ","Ratio: ",round(ratio,digits=2),"  ","Likelihood: ",sum(-dbinom(values(old.test.downsampled),size.ratio^2,prob=pmin(0.99,pmax(0.01,values(guano.downsampled.to.30m))),log=T))+sum(-dbinom(values(prior),size.ratio^2,prob=rep(0.1,times=length(values(guano.downsampled.to.30m))),log=T))))
#cube[,,i]<-as.matrix(test.pattern)
cube<-(j/(j+1))*cube+(1/(j+1))*t(apply(matrix(getValues(test.pattern),nrow=nrow(test.pattern),ncol=ncol(test.pattern),byrow=TRUE), 2, rev))
}
plot(likelihood.store)
image(cube)
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
38*14
532*0.05
setwd("~/Documents/Projects/Biometry2021")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
118109*0.31*0.31
4*0.51*0.51
